package com.dm;
/*
    接口
        使用interface修饰
            public interface 接口名{}
        类实现接口用implements接口名{}
            public class 类名 implements 接口名{}
        接口不能实例化
            接口多态：使用多态的方式，通过实现类对象实例化interimpl
            多态的形式：具体类多态，抽象类多态，接口多态
            接口的前提：有继承或实现关系；有方法重写；有父类（类、接口）引用指向（子、实现）类对象
        接口中的实现类：
            要么重写接口中的所有抽象方法
            要么是抽象类
        接口的成员特点：
            接口中的成员变量默认被final和static修饰，
                public static final int num=20;
            接口中没有构造方法
                因为接口主要是对行为进行抽象，没有具体存在
                但由于java中所有的类都继承Object类，所有默认有无参构造方法
            接口中的成员方法都是抽象的
                默认public abstract

        类和接口的关系：
            类和类的关系：继承关系extends，可以单继承，也可以多层继承
            类和接口的关系：实现关系implements，可以单实现，也可以多实现，还可以继承一个类的同时实现多个接口
            接口和接口的关系：继承关系extends，可以单继承，也可以多继承

        抽象类和接口的区别
            成员区别
                抽象类：变量，常量，构造方法，抽象方法，非抽象方法a
                接口：常量，抽象方法
            关系区别
            设计理念区别：
                抽象类：对类进行抽象，包括属性和行为
                接口：对行为进行抽象

            首先找出不同类之间的共同点进行抽象，比如门都有开和关的行为，然后再对某一特殊行为使用接口，如具备报警功能的门

        抽象类作为形参和返回值
            因为抽象类不能实例化，所以需要子类继承抽象类，然后使用多态的方式返回子类对象
        接口名作为形参和返回值
            使用接口多态，形参需要的和返回的都是该接口的实现类对象


 */

public interface interface_demo {

}
